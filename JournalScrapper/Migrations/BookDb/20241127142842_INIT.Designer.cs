// <auto-generated />
using JournalScrapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JournalScrapper.Migrations.BookDb
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20241127142842_INIT")]
    partial class INIT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JournalScrapper.BookYas", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("MarcType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("JournalScrapper.Field", b =>
                {
                    b.Property<int>("FieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("FieldName")
                        .HasColumnType("int");

                    b.HasKey("FieldID");

                    b.HasIndex("BookID");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("JournalScrapper.SubField", b =>
                {
                    b.Property<int>("SubFieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubFieldID"));

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<string>("SubFieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubFieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubFieldID");

                    b.HasIndex("FieldID");

                    b.ToTable("SubFields");
                });

            modelBuilder.Entity("JournalScrapper.Field", b =>
                {
                    b.HasOne("JournalScrapper.BookYas", "Book")
                        .WithMany("Fields")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("JournalScrapper.SubField", b =>
                {
                    b.HasOne("JournalScrapper.Field", "Field")
                        .WithMany("SubFields")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("JournalScrapper.BookYas", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("JournalScrapper.Field", b =>
                {
                    b.Navigation("SubFields");
                });
#pragma warning restore 612, 618
        }
    }
}
